#!/usr/bin/env python3
import numpy as np
import os.path
import os, string, ast
import struct


def loadField(file_in, Nx, Ny, Nz):
    fd = open(file_in,'rb')
    no_of_doubles = Nx * Ny * Nz
    # straight to numpy data (no buffering)
    numpy_data = np.fromfile(fd, dtype = np.dtype('float64'), count = no_of_doubles)
    numpy_data=numpy_data.reshape(Nx, Ny, Nz, order = 'F')
    print ("Array of shape  " + str(numpy_data.shape) + " read")
    fd.close()
    return numpy_data

def loadLevel(file_in, level, Nx, Ny):
    fd = open(file_in,'rb')
    position = Nx * Ny * level * 8.0
    no_of_doubles = Nx * Ny
    # move to position in file
    fd.seek(position,0)
    # straight to numpy data (no buffering)
    numpy_data = np.fromfile(fd, dtype = np.dtype('float64'), count = no_of_doubles)
    numpy_data=numpy_data.reshape(Nx, Ny, order = 'F')
    return (numpy_data)

def loadBin(file_in, Nz):
    cnt = 0; b = 0; a = 1.0;
    data = np.array(())
    bigEd = '>'
    littleEd = '<'
    dt = np.dtype(littleEd+'i4')
    dtf = np.dtype(littleEd + 'f8')
    with open(file_in,'rb') as f:
        sz = os.path.getsize(file_in)
        print ('file size of %s : %f MB' % (np.float64(file_in)/(1024.0*1024.0), sz))
        dataRemains = True
        while(dataRemains):
            if b != a:
                # read an ineteger of 4 byte
                a = np.fromfile(f, dtype = dt, count= 1)[0] # '<' stands for little endian, i4 == ineteger of 4 byte
            position = f.tell();
            # a is the number of bits written in a single write(*,*) call
#            print("Current file position : ", position, 'b', b)
            if ( (a > 0 & a < 1000000) or (b == a) ):
                dataRemains = True
                no_of_double2read = a / 8.0 # get the no. of 8 byte doubles written in a single write() call
                if no_of_double2read.is_integer():
                    no_of_double2read = int(no_of_double2read)
                else:
                    break
#                print ("no_of_double2read", no_of_double2read)
            else:
                dataRemains = False

            if not dataRemains:
                break
            else:
                # NN is the number rows of 8-byte float written in a single write() call
                NN = no_of_double2read / Nz
                tempdata = np.fromfile(f, dtype = dtf, count = no_of_double2read) # '<d8' means little endian , 8 byte float
                # read numbers as 8-byte double, the number of doubles read
                # should be multiple of Nz
                # check if number of doubles read is multiple of Nz
                if(tempdata.size != NN * Nz):
#                    print ("File Read Error")
                    break;
#                print(cnt, tempdata.size, NN * Nz)
                # convert data to numpy array
                tempdata = tempdata.reshape((NN, Nz), order = 'F')
                if cnt == 0:
                    data = np.copy(tempdata)
                    cnt = cnt + 1
                else:
                    data = np.vstack((data, tempdata))
                b = np.fromfile(f, dtype = littleEd+'f4', count= 1) # read offset
                while b != a:
                    b = np.fromfile(f, dtype = dt, count= 1)
        return (data)
    f.close()



varDic=[]
vars=[  'Von','Sc','Co','nnn','pi','model','averaging','fgr',\
        'tfr','mom_nodes','scl_nodes','FFT_FLAG','nsteps','hprocs','dt',\
        'Nx','Ny','Nz','aNx','l_r','z_i','l_z','sponge','z_d',\
        'rlx_time','Ugal','Vgal','Ug','Vg',"u_star",\
        'press_cor','press_step','u_avg','S_advec','scalarcount',\
        'f_c','M_advec','scalarFlags','nhrs','startUTC',\
        'surfaceFlags','surfaceFluxes','scalarScales',\
        'dsdtHomogeneous','scalarAdvecFlags','inversion',\
        'theta_0','Ri_flag',"c_count",'p_count','cs_count',\
        'nframe','sframe','framestep','n_tslevels','timeseriesfreq',\
        'inituA','initsA','ruler','npart','start_release',\
        'partstep','freq','nr','c_flag','Cd',\
        'pressureScale','densityAir','Cp_air','densityWater','soilLevels','zt',\
        'latentHeatWater','heatCapWater','waterGasConst','moistureCriteria',\
        'temperatureCriteria','tempFluxCriteria','maxFluxIterations',\
        'maxTempIterations','convFactor','endConstSEB','updateFreqSEB',\
        'integrateSoilDiffFreq','albedoFlag','radiationFlag','stepsPerRadVal',\
        'SB_constant','solarIrradiance','latitude','longitude','day',\
        'emissivity','evolflag','amr_crit','min','max','amr_cnt']


def readInput(file_in, vars = vars):
    with open(file_in, mode='r') as f:
        rbound=3
        dicvar={}
        lines = f.readlines()
        #print lines
        for x in reversed(lines):
                str1=x.replace(',','')        # str1 is a string, remove all commas(,)
                lst=str1.split()   # this is a list NOT A STRING
                for item in reversed(vars):
                    vkey=item
                    tf=lst[0:rbound].count(vkey)
                    if tf>0 and vkey=='Von':
                            dicvar.update({'kappa':float(str1.split()[0].replace('d','0'))})
                            vars=[item for item in vars if item!=vkey]
                    elif tf>0 and vkey=='min':
                            dicvar.update({'minGrid':float(str1.split()[0].replace('d','0'))})
                            vars=[item for item in vars if item!=vkey]
                    elif tf>0 and vkey=='max':
                            dicvar.update({'maxGrid':float(str1.split()[0].replace('d','0'))})
                            #var.remove(vkey)
                    elif tf>0:
                          #  print vkey
                            temp=lst[0].replace('d','0')
                            number2store=ast.literal_eval(temp)
                            #print vkey,':',number2store
                            dicvar.update({vkey:number2store})
                            vars=[item for item in vars if item!=vkey]
                    else:
                            pass
                    lines = [item for item in lines if item!= x]
        dicvar.update({'dx' : dicvar['z_i'] * dicvar['pi'] * 2.0 / dicvar['Nx']})
        dicvar.update({'dy' : dicvar['z_i'] * dicvar['pi'] * 2.0 * dicvar['l_r'] / dicvar['Ny']})
        dicvar.update({'dz' : dicvar['l_z']  / (dicvar['Nz']-1)})

    f.close()
    return dicvar



def dic2mat(dicv):
        import scipy.io
        scipy.io.savemat('input_param.mat',dicv)


if  __name__ == "__main__" :

    data1 = loadBin("/home/ahsanuzzaman/neutralChannel_64x64x64_dt0d2125/output/au.bin", 64)
    indata = readInput('/home/ahsanuzzaman/neutralChannel_64x64x64_dt0d2125/input/LESinputs.txt')
    r, c = data1.shape
    totalPhysicalTime = indata['p_count']*r *indata['dt']/ 3600.00; # hours
    print ("row : ", r,  'col :', c)
    print('total physical time simulation ran for %f hours' % (totalPhysicalTime))
    print (np.mean(data1[:, :], 0))




